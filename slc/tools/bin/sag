#! /usr/bin/env python
#
# sag: This file is part of the SL toolchain.
#
# Copyright (C) 2009,2013 The SL project.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 3
# of the License, or (at your option) any later version.
#
# The complete GNU General Public Licence Notice can be found as the
# `COPYING' file in the root directory.
#

import sys
import re
import StringIO
import struct

def die(msg):
    print >>sys.stderr, "%s: %s" % (sys.argv[0], msg)
    sys.exit(1)

def emit(od):
    spec = sys.argv[2].lower()
    fmtmap = {
        16: ['h','H'],
        32: ['l','L'],
        64: ['q','Q'] }
    if spec[0] == 'b':
        fmtbase = '>' # big endian
        sfmt,ufmt = fmtmap[int(spec[1:3])]
        dfmt = spec[3]
    elif spec[0] == 'l':
        fmtbase = '<' # little endian
        sfmt,ufmt = fmtmap[int(spec[1:3])]
        dfmt = spec[3]
    elif spec == 'native':
        fmtbase = '@'
        sfmt,ufmt = ['l','L']
        dfmt = 'd'
    else:
        print >>sys.stderr, "%s: unrecognized layout specification: %s" % (sys.argv[0], spec)
        sys.exit(1)

    s = StringIO.StringIO()
    fmt = sfmt
    lbl = {}
    for v in od:
        if v == 'a':
            p = '\0' * ((64 - s.tell() % 64) % 64)
            #print "%r -> %r" % (v, (s.tell(), p))
            s.write(p)
            assert (s.tell() % 64 == 0)
        elif v == 'u':
            fmt = ufmt
        elif v == 'l':
            fmt = sfmt
        elif v == 'd':
            fmt = dfmt
        elif type(v) == type('') and v[0] == '&':
            lbl[v[1:]] = s.tell()
            p = struct.pack(fmtbase + ufmt, 0)
            #print "%r -> %r" % (v, (s.tell(), p))
            s.write(p)
        elif type(v) == type('') and v[0] == ':':
            l = v[1:]
            assert l in lbl
            off = s.tell()
            s.seek(lbl[l])
            p = struct.pack(fmtbase + ufmt, off)
            #print "%r -> %r" % (v, (s.tell(), p))
            s.write(p)
            s.seek(off)
        else:
            p = struct.pack(fmtbase + fmt, v)
            #print "%r -> %r" % (v, (s.tell(), p))
            s.write(p)

    print s.getvalue()
        
class FibreGenerator(object):
    def mergemax(self, r):
        if len(r) == 0:
            return r
        l = len(r[0])
        return [max((x[i] for x in r)) for i in xrange(l)] 

    def dim(self, d):
        if type(d) is type([]):
            r = []
            for v in d:
                newdim = self.dim(v)
                r.append(newdim)
                if len(r[0]) != len(newdim):
                        die("data contains heterogeneous array dimensions")
            r = [len(d)] + (len(d) == 0 and [0] or self.mergemax(r))
            ##print >>sys.stderr, "XXX: %r" % r
            return r
        else:
            return [0]

    def dt(self,d):
        if type(d) is type(0) or type(d) is type(0L):
            return (d >= 0) and "u" or "l"
        elif type(d) is type(0.0):
            return "d"
        else:
            die("can't recognize type: %r" % d)

    def gt(self,t1, t2):
        a = (t1, t2)
        if "d" in a:
            return "d"
        elif "l" in a:
            return "l"
        return "u"

    def ty(self, d):
        if type(d) is type([]):
            t = "u"
            for v in d:
                t = self.gt(t, self.ty(v))
            return t
        else:
            return self.dt(d)

    def dozeros(self, od, sz):
        if sz[0]:
            for i in xrange(sz[0]):
                self.dozeros(od, sz[1:])
        else:
            od.append(0)

    def unfold(self, od, sz, item):
        if type(item) is type([]):
            for d in item:
                self.unfold(od, sz[1:], d)
            for i in xrange(len(item), sz[0]):
                self.dozeros(od, sz[1:])
        else:
            od.append(item)


    def dogen(self):
        d = sys.stdin.read()

        def vu(n):
            return [x for x in xrange(0,n)]
        def vl(n):
            return [((x % 2 == 0) and -x or x) for x in xrange(1,n+1)]
        def v(n):
            return [0.5*((x % 2 == 0) and -x or x) for x in xrange(0,n)]
        def vc(n):
            return [[x + 0.,0.] for x in xrange(1,n+1)]

        d = re.sub(r'(#[^\n]*\n|\s+)', r' ', d)
        d = re.sub(r'\[(([0-9,]|\s)*:)?\s*', r'[', d)
        d = re.sub(r'\]\[', r'] [', d)
        d = re.sub(r'\s+\]', r']', d)
        d = re.sub(r'[dD]', 'e', d)
        d = '[' + re.sub(r'\s+', r',', d).strip(',') + ']'
        #print d
        data = eval(d)


        t2c = {'u':'unsigned long','l':'long','d':'double'}
        t2e = {'u':0,'l':1,'d':2}

        ilist = []
        for i,item in enumerate(data):
            if item is None: break
            sz = self.dim(item)
            t = self.ty(item)
            #print >>sys.stderr, "%r / %r / %r" % (i, sz, t)
            ilist.append((i,sz,t,item))

        od = []

        for i, sz, t, _ in ilist:
            od.append('l')
            od.append(t2e[t])
            od.append('u')
            od.append(len(sz)-1)
            od.append('&shape%d' % i)
            od.append('&data%d' % i)

        od.append('l')
        od.append(-1)
        od.append('u')
        od.append(0)
        od.append(0)
        od.append('&end')

        for i, sz, _, _ in ilist:
            od.append(':shape%d' % i)
            for x in sz:
                od.append(x)
        for i, sz, t, item in ilist:
            od.append('a')
            od.append(':data%d' % i)
            od.append(t)
            self.unfold(od, sz, item)
        od.append('a')
        od.append(':end')
        od.append(0)

        #print od
        emit(od)


class SlrVarGenerator(object):
    def genasm(self, out, data):
        print >>out, "struct __slr_data_t {"
        print >>out, "  struct { ptrdiff_t offset; size_t nitems; } meta[%d];" % (len(data)+1)
        for d in data:
            print >>out, "  %s data_%s[%d] __attribute__((__aligned__(64)));" % (d['type'], d['label'], d['len'])
        print >>out, "  char end; } __slr_data = {\n  { /* meta */"
        for d in data:
            print >>out, "    { (char*)(void*)&__slr_data.data_%s - (char*)(void*)&__slr_data," % d['label'],
            print >>out, "%d }," % d['len']
        print >>out, "    { 0, (char*)(void*)&__slr_data.end - (char*)(void*)&__slr_data } },"
        for d in data:
            print >>out, "  { /* %s */ " % d['label']
            for i in d['items']:
                print >>out, "\t%s," % i
            print >>out, "  },"
        print " 0 };"

    def proto(self, out, parm):
        if len(parm):
            print >>out, "Program variables:"
            for k, v in parm.items():
                print >>out, "\t%s (%s)\t%s" % (k, v['type'], v['desc'])
            print >>out
            print >>out, "Initializers:"
            print >>out, "\t(comma-separated list)\tuse the specified data items."
            print >>out, "\tfile:FILENAME\tload data items from FILENAME, one per line."
            print >>out, "\traw:FILENAME\tload data items from FILENAME as raw bytes."
            print >>out
            print >>out, "Examples:"
            print >>out, "\t<program> foo=42,69"
            print >>out, "\t<program> foo=file:hello.txt"
        else:
            print >>out, "This program has no input variables."

    def usage(self, parm):
        print >>sys.stderr, "Usage: <program> [VAR=INIT]..."
        print >>sys.stderr 
        self.proto(sys.stderr, parm)

    def dogen(self):
        reqdict = {}
        parm = {}
        spec = {}
        for l in sys.stdin:
            _, idx, label, type, desc = l.rstrip().split(':',4)
            if label in reqdict:
                die("%s: already declared" % label)
            reqdict[idx] = label
            parm[label] = {'type':type,'desc':desc}
        required = []
        order = [int(x) for x in reqdict.keys()]
        order.sort()
        for k in order:
            v = reqdict[str(k)]
            if v not in required:
                required.append(v)

        for a in sys.argv[2:]:
                if a == "list":
                    self.proto(sys.stdout, parm)
                    sys.exit(0)
                if not '=' in a:
                    usage(parm)
                    sys.exit(1)
                label, init = a.split('=',1)
                if label not in required:
                    die("%s: unrecognized variable" % label)
                if label in spec:
                    die("%s: multiple definitions found" % label)
                spec[label] = init

        data = []
        for r in required:
            if r not in spec:
                print >>sys.stderr, "#warning: %s not specified, assuming empty array" % r
                spec[r] = ""

            init = spec[r]
            type = parm[r]['type']
            if init.startswith('raw:'):
                fname = init.split(':',1)[1]
                s = file(fname).read()
                p = 0
                ls = len(s)
                bytes = []
                while p + 16 < ls:
                    bytes.append(','.join(('0x%x' % ord(x) for x in s[p:p+16])))
                    p += 16
                while p < ls:
                    bytes.append('0x%x' % ord(s[p]))
                    p += 1
                data.append({'label':r, 'type':type, 'len':ls, 'items':bytes})
            elif init.startswith('file:'):
                fname = init.split(':',1)[1]
                items = []
                for l in file(fname):
                    items.append(l.strip())
                data.append({'label':r, 'type':type, 'len':len(items), 'items':items})
            else:
                if not init:
                    values = []
                else:
                    values = init.split(',')
                data.append({'label':r, 'type':type, 'len':len(values), 'items':values})
        self.genasm(sys.stdout, data)

if __name__ == "__main__":
    if sys.argv[1] == "d":
        m = SlrVarGenerator()
    elif sys.argv[1] == "f":
        m = FibreGenerator()
    m.dogen()

